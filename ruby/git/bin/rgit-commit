#!/usr/bin/env ruby

ENV['VISUAL'] ||= 'vim'

$LOAD_PATH << File.expand_path('../../lib', __FILE__)

require 'rgit/object'
require 'digest'
require 'time'

RGIT_DIR = "#{Dir.pwd}/.rgit".freeze
COMMIT_MSG_PATH = "#{RGIT_DIR}/COMMIT_EDITMSG"
COMMIT_MSG_TEMPLATE = <<-TXT
# Title
# 
# Body
TXT

def index_files
  File.open("#{RGIT_DIR}/index").each_line
end

def index_tree
  index_files.each_with_object({}) do |line, obj|
    sha, path = line.split(' ')
    segments = path.split('/')
    segments.reduce(obj) do |acc, s|
      if s == segments.last
        acc[s] = sha
        acc
      else
        acc[s] ||= {}
        acc[s]
      end
    end
  end
end

def build_tree(name, tree)
  sha = Digest::SHA1.hexdigest Time.now.iso8601 + name

  object = RGit::Object.new(sha)
  object.write do |file|
    tree.each do |key, val|
      if val.is_a?(Hash)
        dir_sha = build_tree(key, val)
        file.puts "tree #{dir_sha} #{key}"
      else
        file.puts "blob #{val} #{key}"
      end
    end
  end

  sha
end

def build_commit(tree_sha:)
  File.open(COMMIT_MSG_PATH, 'w') do |file|
    file.write COMMIT_MSG_TEMPLATE
  end

  if ENV['IS_TEST'] != 'true'
    Kernel.system "$VISUAL #{COMMIT_MSG_PATH}"
  end

  committer = 'user'
  msg = File.read COMMIT_MSG_PATH
  sha = Digest::SHA1.hexdigest Time.now.iso8601 + committer
  
  object = RGit::Object.new(sha)
  object.write do |file|
    file.puts "tree #{tree_sha}"
    file.puts "author #{committer}"
    file.puts
    file.puts msg
  end

  sha
end

def update_ref(commit_sha:)
  current_ref = File.read("#{RGIT_DIR}/HEAD").strip.split.last
  current_branch = current_ref.split('/').last

  File.open("#{RGIT_DIR}/#{current_branch}", 'w') do |file|
    file.print commit_sha
  end
end

def clear_index
  File.truncate "#{RGIT_DIR}/index", 0
end

if index_files.count == 0
  $stderr.puts 'Nothing to commit'
  exit 1
end

root_sha = build_tree('root', index_tree)
commit_sha = build_commit(tree_sha: root_sha)
update_ref(commit_sha:)
clear_index